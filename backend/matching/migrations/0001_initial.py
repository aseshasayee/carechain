# Generated by Django 5.2.4 on 2025-08-08 07:01

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('jobs', '0003_interview_feedback'),
        ('profiles', '0007_candidateverification_hospitalverification'),
    ]

    operations = [
        migrations.CreateModel(
            name='AutoMatchingSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_enabled', models.BooleanField(default=True)),
                ('matching_frequency', models.CharField(choices=[('realtime', 'Real-time'), ('hourly', 'Every Hour'), ('daily', 'Daily'), ('weekly', 'Weekly')], default='daily', max_length=20)),
                ('min_match_score', models.FloatField(default=60.0, help_text='Minimum match score to create recommendation', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('max_recommendations_per_candidate', models.IntegerField(default=10, help_text='Maximum recommendations to show per candidate')),
                ('exclude_applied_jobs', models.BooleanField(default=True, help_text='Exclude jobs already applied to')),
                ('exclude_viewed_jobs', models.BooleanField(default=False, help_text='Exclude jobs already viewed')),
                ('learning_enabled', models.BooleanField(default=True, help_text='Enable machine learning improvements')),
                ('last_run', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Auto Matching Settings',
                'verbose_name_plural': 'Auto Matching Settings',
            },
        ),
        migrations.CreateModel(
            name='CandidatePreferences',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('preferred_job_types', models.JSONField(default=list, help_text='Preferred job types')),
                ('preferred_locations', models.JSONField(default=list, help_text='Preferred work locations')),
                ('max_commute_distance', models.IntegerField(default=25, help_text='Maximum commute distance in miles')),
                ('salary_range', models.CharField(choices=[('entry', 'Entry Level (30-50k)'), ('mid', 'Mid Level (50-80k)'), ('senior', 'Senior Level (80-120k)'), ('executive', 'Executive Level (120k+)')], default='mid', max_length=20)),
                ('min_salary', models.DecimalField(blank=True, decimal_places=2, help_text='Minimum acceptable salary', max_digits=10, null=True)),
                ('schedule_preference', models.CharField(choices=[('full_time', 'Full Time'), ('part_time', 'Part Time'), ('contract', 'Contract'), ('per_diem', 'Per Diem'), ('travel', 'Travel Assignment')], default='full_time', max_length=20)),
                ('remote_work_acceptable', models.BooleanField(default=False)),
                ('night_shift_acceptable', models.BooleanField(default=True)),
                ('weekend_work_acceptable', models.BooleanField(default=True)),
                ('travel_acceptable', models.BooleanField(default=False)),
                ('max_travel_percentage', models.IntegerField(default=0, help_text='Maximum acceptable travel percentage', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('notification_frequency', models.CharField(choices=[('immediate', 'Immediate'), ('daily', 'Daily Digest'), ('weekly', 'Weekly Digest'), ('none', 'No Notifications')], default='daily', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('candidate', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='profiles.candidateprofile')),
            ],
            options={
                'verbose_name': 'Candidate Preference',
                'verbose_name_plural': 'Candidate Preferences',
            },
        ),
        migrations.CreateModel(
            name='JobMatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('match_score', models.FloatField(help_text='Overall match score (0-100)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('skills_score', models.FloatField(help_text='Skills match score (0-100)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('experience_score', models.FloatField(help_text='Experience match score (0-100)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('location_score', models.FloatField(help_text='Location match score (0-100)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('education_score', models.FloatField(help_text='Education match score (0-100)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('match_details', models.JSONField(default=dict, help_text='Detailed breakdown of matching factors')),
                ('is_viewed', models.BooleanField(default=False)),
                ('is_applied', models.BooleanField(default=False)),
                ('is_recommended', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('candidate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='profiles.candidateprofile')),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='jobs.job')),
            ],
            options={
                'ordering': ['-match_score', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MatchingCriteria',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('job_type', models.CharField(max_length=100)),
                ('required_skills', models.JSONField(default=list, help_text='List of required skills')),
                ('preferred_skills', models.JSONField(default=list, help_text='List of preferred skills')),
                ('min_experience', models.IntegerField(default=0, help_text='Minimum years of experience')),
                ('education_requirements', models.JSONField(default=list, help_text='Education requirements')),
                ('certifications', models.JSONField(default=list, help_text='Required certifications')),
                ('location_weight', models.FloatField(default=0.3, help_text='Weight for location matching (0-1)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('skills_weight', models.FloatField(default=0.4, help_text='Weight for skills matching (0-1)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('experience_weight', models.FloatField(default=0.2, help_text='Weight for experience matching (0-1)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('education_weight', models.FloatField(default=0.1, help_text='Weight for education matching (0-1)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Matching Criteria',
                'verbose_name_plural': 'Matching Criteria',
                'unique_together': {('job_type',)},
            },
        ),
        migrations.CreateModel(
            name='RecommendationFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feedback_rating', models.CharField(choices=[('excellent', 'Excellent Match'), ('good', 'Good Match'), ('fair', 'Fair Match'), ('poor', 'Poor Match'), ('irrelevant', 'Not Relevant')], max_length=20)),
                ('feedback_comments', models.TextField(blank=True)),
                ('is_interested', models.BooleanField(default=False)),
                ('will_apply', models.BooleanField(default=False)),
                ('reasons_not_interested', models.JSONField(default=list, help_text='Reasons why candidate is not interested')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('candidate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='profiles.candidateprofile')),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='jobs.job')),
                ('job_match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='matching.jobmatch')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SearchHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('search_query', models.CharField(max_length=500)),
                ('job_type', models.CharField(blank=True, max_length=100)),
                ('location', models.CharField(blank=True, max_length=200)),
                ('filters_applied', models.JSONField(default=dict, help_text='Filters applied during search')),
                ('results_count', models.IntegerField(default=0)),
                ('clicked_jobs', models.JSONField(default=list, help_text='List of job IDs clicked')),
                ('applied_jobs', models.JSONField(default=list, help_text='List of job IDs applied to')),
                ('search_date', models.DateTimeField(auto_now_add=True)),
                ('candidate', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='profiles.candidateprofile')),
            ],
            options={
                'verbose_name': 'Search History',
                'verbose_name_plural': 'Search Histories',
                'ordering': ['-search_date'],
            },
        ),
        migrations.AddIndex(
            model_name='jobmatch',
            index=models.Index(fields=['candidate', '-match_score'], name='matching_jo_candida_1814bd_idx'),
        ),
        migrations.AddIndex(
            model_name='jobmatch',
            index=models.Index(fields=['job', '-match_score'], name='matching_jo_job_id_47bffa_idx'),
        ),
        migrations.AddIndex(
            model_name='jobmatch',
            index=models.Index(fields=['match_score'], name='matching_jo_match_s_1101d3_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='jobmatch',
            unique_together={('candidate', 'job')},
        ),
        migrations.AlterUniqueTogether(
            name='recommendationfeedback',
            unique_together={('candidate', 'job')},
        ),
    ]
